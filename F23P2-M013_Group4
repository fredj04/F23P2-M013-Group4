import random
hap = [7,4,10,5]
dev = [3,10,6,2]

#TASK 1

def exploitOnly():
    c1 = []
    c2= []
    c3= []
    c4 = []
    cfinal=[] # creates empty lists to store values
    c1.append(random.normalvariate(hap[0],dev[0]))
    c2.append(random.normalvariate(hap[1],dev[1]))
    c3.append(random.normalvariate(hap[2],dev[2]))
    c4.append(random.normalvariate(hap[3],dev[3])) # visit each cafteria once to start and generates a random happiness value
    cfinal = c1+c2+c3+c4 # creates list with first 4 happiness values
    m = max(cfinal) # finds highest happiness value from first four days
    if m == cfinal[0]: # checks to see if m is equal to value at index 0 of cfinal
        for i in range(196): 
            c1.append(random.normalvariate(hap[0],dev[0])) # if so proceeds to loop through generating a new happiness value for the
# rest of the 196 days to the specific cafeteria
    elif m == cfinal[1]:
        for i in range(196)
            c2.append(random.normalvariate(hap[1],dev[1]))
    elif m == cfinal[2]:
        for i in range(196)
            c3.append(random.normalvariate(hap[2],dev[2]))
    else: #avg == a[3]:
        for i in range(196)
            c4.append(random.normalvariate(hap[3],dev[3]))
    c = c1+c2+c3+c4 #adds all of the lists together
    return sum(c) # returns the sum of the final list


#TASK 2
import random
import statistics
pairs = [(7, 5), (4, 4), (10, 25), (5, 10)] # sets the happiness values and deviation as a list of tuples

def exploreOnly() -> float:
    sum_happiness = 0  # sets an empty value

    for i in range(4):  # this loop will run for the four cafeteria
        hap, dev = pairs[i]
        for s in range(50):  # loops over the 50 days of each cafeteria
            happiness = random.normalvariate(hap, dev)
            sum_happiness += happiness  # sum_happiness is equal to the value of happiness
    return sum_happiness


sum_happiness = exploreOnly()  # sets the sum_happiness to equal the sum of happiness from the 4 loops over 200 days
print("Sum of Happiness:", sum_happiness)  # prints the total sum of happiness





#TASK 3
# This tasks finds the total amount of happiness for all 200 days.
def eGreedy(e=10):
  c1=[]
  c2=[]
  c3=[]
  c4=[] # sets up 4 empty list
  c1.append(random.normalvariate(hap[0],dev[0]))
  c2.append(random.normalvariate(hap[1],dev[1]))
  c3.append(random.normalvariate(hap[2],dev[2]))
  c4.append(random.normalvariate(hap[3],dev[3])) #appends a random happiness value for each cafeteria once

  for i in range(196):
    r = random.random() # gets a random float between 0-1
    if r < (e/100): # if it is lower then then .10 in this case.
      cblank = random.randomint(1,4) # generates a random int between 1-4 inclusive
      if cblank == 1: 
        c1.append(random.normalvariate(hap[0],dev[0]))
      elif cblank == 2:
        c2.append(random.normalvariate(hap[1],dev[1]))
      elif cblank == 3:
        c3.append(random.normalvariate(hap[2],dev[2]))
      else: #cblank == 4
        c4.append(random.normalvariate(hap[3],dev[3])) # if the random int is the same as the value for the 
#specific cafeteria append a radnom happiness value to it
    else:
      a = []
      a.append(sum(c1)/len(c1))
      a.append(sum(c2)/len(c2))
      a.append(sum(c3)/len(c3))
      a.append(sum(c4)/len(c4)) # finds the average happiness value for each cafeteria
      avg = max(a) #avg is the highest average happiness val
      if avg == a[0]:
        c1.append(random.normalvariate(hap[0],dev[0]))
      elif avg == a[1]:
        c2.append(random.normalvariate(hap[1],dev[1]))
      elif avg == a[2]:
        c3.append(random.normalvariate(hap[2],dev[2]))
      else: #avg == a[3]:
        c4.append(random.normalvariate(hap[3],dev[3])) # if the index of avg equals the specific cafeterias index then append
# a random happiness value to it
  cf = c1+c2+c3+c4 # combines all the lists
  return sum(cf) # returns their sum

      




#TASK 4
